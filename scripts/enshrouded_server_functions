# Refference: https://github.com/mornedhels/enshrouded-server/blob/main/dockerfiles/Dockerfile
# Refference: https://enshrouded.fandom.com/wiki/Dedicated_Server_Hosting

# For Server Download
STEAM_ENSHROUDED_SERVER_APPID="2278520"

check_whitelist() {
    if [ -n "$SERVER_ALLOW_LIST" ]; then
        update_config_element "EnableWhitelist" "True"
        
        # Remove existing whitelist file if it exists
        if [ -f "$STEAM_ALLOW_LIST_PATH" ]; then
            rm "$STEAM_ALLOW_LIST_PATH" || { log "Failed to remove existing whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        fi
        
        # Create an empty whitelist file
        touch "$STEAM_ALLOW_LIST_PATH" || { log "Failed to create whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        
        # Populate whitelist file with STEAM_IDs
        # Split SERVER_ALLOW_LIST on commas and iterate over each part
        IFS=", " read -r -a STEAM_IDS <<< "$SERVER_ALLOW_LIST"
        for STEAM_ID in "${STEAM_IDS[@]}"; do
            echo "$STEAM_ID" >> "$STEAM_ALLOW_LIST_PATH" || { log "Failed to write to whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        done
        
        log "Allow list created:"
        cat "$STEAM_ALLOW_LIST_PATH" | log_stdout
    fi
}

wine_setup (){

    export WINEARCH="win64"
    #export WINE_MONO_VERSION=4.9.4             # https://wiki.winehq.org/Mono
    export WINEDEBUG=fixme-all                  # https://wiki.winehq.org/Debug_Channels

    # https://wiki.winehq.org/FAQ#Is_there_a_64_bit_Wine , https://wiki.winehq.org/FAQ#How_do_I_create_a_32_bit_wineprefix_on_a_64_bit_system?
    # It requires the installation of 32 bit libraries in order to run 32 bit Windows applications

    # Check first time wine run, this will force Wine config creation so that our server load won't fail on first run.
    if [ ! -d "$WINEPREFIX" ]; then
        # https://wiki.winehq.org/Wineboot
        log "First run detected, wait 15 seconds for wine config creation."
        if echo "$ARCH" | grep -q "arm"; then
            box64 wine64 wineboot -iuf | log_stdout
        else
            wine64 wineboot -iuf | log_stdout
        fi
    fi
}

server_update () {

    # TODO evalute if APP_PID is present, if so take down for update.

    log "Starting steamcmd update"

    if [ ! -d "/home/$APP_NAME/Steam" ]; then \
        log "$STEAMCMD_PATH directory not complete, presuming first run."
        $STEAMCMD_PATH/steamcmd.sh +login anonymous +quit | log_stdout
    fi

    # Update server 
    # Refference: https://developer.valvesoftware.com/wiki/SteamCMD
    log "SteamCMD begining download of $APP_NAME"

    $STEAMCMD_PATH/steamcmd.sh \
    +@sSteamCmdForcePlatformType windows \
    +force_install_dir $APP_FILES \
    +login anonymous \
    +app_update $STEAM_ENSHROUDED_SERVER_APPID \
    validate \
    +quit | log_stdout

}

needs_update() {
    local STEAM_ENSHROUDED_SERVER_APPID=$1
    local API_URL="https://api.steamcmd.net/v1/info/$STEAM_ENSHROUDED_SERVER_APPID"
    local MANIFEST_FILE="$APP_FILES/steamapps/appmanifest_${STEAM_ENSHROUDED_SERVER_APPID}.acf"

    # TODO log local and remote version
    # Don't refference ENV, refference local?

    # Get buildid from API
    local API_BUILDID=$(curl -s "$API_URL" | grep -oP '"public":\s*\{\s*"buildid":\s*"\K[^"]+')

    # Get buildid from local manifest
    local LOCAL_BUILDID=$(grep -oP '"buildid"\s+"\K[^"]+' "$MANIFEST_FILE")

    # Compare buildids
    if [[ "$API_BUILDID" > "$LOCAL_BUILDID" ]]; then
        echo "Update Needed"
        return 0  # True, update needed
    else
        echo "Undate not Needed"
        return 1  # False, no update needed
    fi
}

update_config_element() {
    local element="$1"
    local new_value="$2"

    # Usage example:
    # update_config_element "ServerName" "NewServerName" "$WORLD_FILES"

    # Find and update the element in .ini files
    find "$WORLD_FILES" -type f -name "*.ini" -exec grep -q "$element" {} \; -exec sed -i "s/^$element=.*/$element=$new_value/" {} \; -exec awk -v element="$element" -v new_value="$new_value" 'BEGIN { FS = "=" } $1 == element { print FILENAME ":" NR ": " $0 }' {} \;
}

server_start() {

    # Display server configuration
    log "+----------------------------------+"
    log "SERVER_NAME: $SERVER_NAME"
    log "SERVER_PLAYER_PASS: $SERVER_PLAYER_PASS"
    log "WORLD_NAME: $WORLD_NAME"
    log "SERVER_PUBLIC: $SERVER_PUBLIC"
    log "SERVER_ARGS: $SERVER_ARGS"
    log "+----------------------------------+"
    sleep 1

    log "Configuration files updated successfully"

    log "Starting Enshrouded (@ $APP_COMMAND) via WINE, WINEPREFIX=$WINEPREFIX, DISPLAY=$DISPLAY"
    xvfb-run \
    --auto-servernum \
    --server-args='-screen 0 640x480x24:32 -nolisten tcp' $APP_COMMAND \
    -nosteamclient \
    -game \
    -server \
    -log >> $APP_LOGS/$APP_EXE.log 2>&1 &
  
    # Track pids
    sleep 1
    export APP_PID=$!

    log "Started $COMMAND with PID $APP_PID"
}

